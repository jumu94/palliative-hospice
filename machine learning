import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# Load preprocessed data
file_path = 'C:\\Users\\Gladiator\\Downloads\\Cleaned_Data.csv'  
data = pd.read_csv(file_path)

# Define features (X) and target (y)
target_column = 'min_medicare_pricing_for_new_patient' 
X = data.drop(columns=[target_column])
y = data[target_column]

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define models
models = {
    "Linear Regression": LinearRegression(),
    "Random Forest": RandomForestRegressor(random_state=42, n_estimators=100),
    "Gradient Boosting": GradientBoostingRegressor(random_state=42, n_estimators=100),
    "Support Vector Machine": SVR(kernel='rbf'),
    "K-Nearest Neighbors": KNeighborsRegressor(n_neighbors=5)
}

# Train and evaluate models
results = []
for name, model in models.items():
    print(f"Training {name}...")
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    
    # Evaluate the model
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    results.append({"Model": name, "MSE": mse, "R^2": r2})

# Display results
results_df = pd.DataFrame(results).sort_values(by="R^2", ascending=False)
print("\nModel Performance:\n", results_df)

# Best model analysis
best_model_name = results_df.iloc[0]["Model"]
best_model = models[best_model_name]
print(f"\nBest Model: {best_model_name}")
print("Feature Importance (if applicable):")
if hasattr(best_model, "feature_importances_"):
    feature_importance = pd.DataFrame({
        "Feature": X.columns,
        "Importance": best_model.feature_importances_
    }).sort_values(by="Importance", ascending=False)
    print(feature_importance)
